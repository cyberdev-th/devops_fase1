name: CI/CD - Build, Push e Deploy da Aplicação

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_URI: 694120675300.dkr.ecr.us-east-1.amazonaws.com/minha-api-devops
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build e Push para ECR
    runs-on: ubuntu-latest

    steps:
      - name: 1. Checkout do Repositório
        uses: actions/checkout@v4

      - name: 2. Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 3. Instalar Dependências e Rodar Testes
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

      - name: 4. Configurar Credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 5. Login no Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: 6. Configurar o Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 7. Build, Tag e Push da Imagem para o ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY_URI }}:latest
            ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy na Instância EC2
    runs-on: ubuntu-latest
    needs: build-and-push 

    steps:
      - name: 1. Deploy na EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}
            
            docker pull ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
            
            docker stop minha-api-container || true
            docker rm minha-api-container || true
            
            docker run -d -p 80:5000 --name minha-api-container ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
